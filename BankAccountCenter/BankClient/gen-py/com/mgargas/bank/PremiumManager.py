#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import com.mgargas.bank.StandardManager
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(com.mgargas.bank.StandardManager.Iface):
  def askForLoan(self, loanRequest):
    """
    Parameters:
     - loanRequest
    """
    pass


class Client(com.mgargas.bank.StandardManager.Client, Iface):
  def __init__(self, iprot, oprot=None):
    com.mgargas.bank.StandardManager.Client.__init__(self, iprot, oprot)

  def askForLoan(self, loanRequest):
    """
    Parameters:
     - loanRequest
    """
    self.send_askForLoan(loanRequest)
    return self.recv_askForLoan()

  def send_askForLoan(self, loanRequest):
    self._oprot.writeMessageBegin('askForLoan', TMessageType.CALL, self._seqid)
    args = askForLoan_args()
    args.loanRequest = loanRequest
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_askForLoan(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = askForLoan_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ig is not None:
      raise result.ig
    if result.ia is not None:
      raise result.ia
    raise TApplicationException(TApplicationException.MISSING_RESULT, "askForLoan failed: unknown result");


class Processor(com.mgargas.bank.StandardManager.Processor, Iface, TProcessor):
  def __init__(self, handler):
    com.mgargas.bank.StandardManager.Processor.__init__(self, handler)
    self._processMap["askForLoan"] = Processor.process_askForLoan

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_askForLoan(self, seqid, iprot, oprot):
    args = askForLoan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = askForLoan_result()
    try:
      result.success = self._handler.askForLoan(args.loanRequest)
    except InvalidGuid, ig:
      result.ig = ig
    except InvalidAccount, ia:
      result.ia = ia
    oprot.writeMessageBegin("askForLoan", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class askForLoan_args:
  """
  Attributes:
   - loanRequest
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'loanRequest', (LoanRequest, LoanRequest.thrift_spec), None, ), # 1
  )

  def __init__(self, loanRequest=None,):
    self.loanRequest = loanRequest

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.loanRequest = LoanRequest()
          self.loanRequest.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('askForLoan_args')
    if self.loanRequest is not None:
      oprot.writeFieldBegin('loanRequest', TType.STRUCT, 1)
      self.loanRequest.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class askForLoan_result:
  """
  Attributes:
   - success
   - ig
   - ia
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (LoanResponse, LoanResponse.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ig', (InvalidGuid, InvalidGuid.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ia', (InvalidAccount, InvalidAccount.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, ig=None, ia=None,):
    self.success = success
    self.ig = ig
    self.ia = ia

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = LoanResponse()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ig = InvalidGuid()
          self.ig.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ia = InvalidAccount()
          self.ia.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('askForLoan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ig is not None:
      oprot.writeFieldBegin('ig', TType.STRUCT, 1)
      self.ig.write(oprot)
      oprot.writeFieldEnd()
    if self.ia is not None:
      oprot.writeFieldBegin('ia', TType.STRUCT, 2)
      self.ia.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
