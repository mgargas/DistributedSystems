/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mgargas.bank;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PremiumManager {

  public interface Iface extends StandardManager.Iface {

    public LoanResponse askForLoan(LoanRequest loanRequest) throws InvalidGuid, InvalidAccount, org.apache.thrift.TException;

  }

  public interface AsyncIface extends StandardManager .AsyncIface {

    public void askForLoan(LoanRequest loanRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends StandardManager.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public LoanResponse askForLoan(LoanRequest loanRequest) throws InvalidGuid, InvalidAccount, org.apache.thrift.TException
    {
      send_askForLoan(loanRequest);
      return recv_askForLoan();
    }

    public void send_askForLoan(LoanRequest loanRequest) throws org.apache.thrift.TException
    {
      askForLoan_args args = new askForLoan_args();
      args.setLoanRequest(loanRequest);
      sendBase("askForLoan", args);
    }

    public LoanResponse recv_askForLoan() throws InvalidGuid, InvalidAccount, org.apache.thrift.TException
    {
      askForLoan_result result = new askForLoan_result();
      receiveBase(result, "askForLoan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ig != null) {
        throw result.ig;
      }
      if (result.ia != null) {
        throw result.ia;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "askForLoan failed: unknown result");
    }

  }
  public static class AsyncClient extends StandardManager.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void askForLoan(LoanRequest loanRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      askForLoan_call method_call = new askForLoan_call(loanRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class askForLoan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LoanRequest loanRequest;
      public askForLoan_call(LoanRequest loanRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanRequest = loanRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("askForLoan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        askForLoan_args args = new askForLoan_args();
        args.setLoanRequest(loanRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoanResponse getResult() throws InvalidGuid, InvalidAccount, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_askForLoan();
      }
    }

  }

  public static class Processor<I extends Iface> extends StandardManager.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("askForLoan", new askForLoan());
      return processMap;
    }

    public static class askForLoan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, askForLoan_args> {
      public askForLoan() {
        super("askForLoan");
      }

      public askForLoan_args getEmptyArgsInstance() {
        return new askForLoan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public askForLoan_result getResult(I iface, askForLoan_args args) throws org.apache.thrift.TException {
        askForLoan_result result = new askForLoan_result();
        try {
          result.success = iface.askForLoan(args.loanRequest);
        } catch (InvalidGuid ig) {
          result.ig = ig;
        } catch (InvalidAccount ia) {
          result.ia = ia;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends StandardManager.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("askForLoan", new askForLoan());
      return processMap;
    }

    public static class askForLoan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, askForLoan_args, LoanResponse> {
      public askForLoan() {
        super("askForLoan");
      }

      public askForLoan_args getEmptyArgsInstance() {
        return new askForLoan_args();
      }

      public AsyncMethodCallback<LoanResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LoanResponse>() { 
          public void onComplete(LoanResponse o) {
            askForLoan_result result = new askForLoan_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            askForLoan_result result = new askForLoan_result();
            if (e instanceof InvalidGuid) {
                        result.ig = (InvalidGuid) e;
                        result.setIgIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvalidAccount) {
                        result.ia = (InvalidAccount) e;
                        result.setIaIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, askForLoan_args args, org.apache.thrift.async.AsyncMethodCallback<LoanResponse> resultHandler) throws TException {
        iface.askForLoan(args.loanRequest,resultHandler);
      }
    }

  }

  public static class askForLoan_args implements org.apache.thrift.TBase<askForLoan_args, askForLoan_args._Fields>, java.io.Serializable, Cloneable, Comparable<askForLoan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("askForLoan_args");

    private static final org.apache.thrift.protocol.TField LOAN_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new askForLoan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new askForLoan_argsTupleSchemeFactory());
    }

    public LoanRequest loanRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_REQUEST((short)1, "loanRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_REQUEST
            return LOAN_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("loanRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(askForLoan_args.class, metaDataMap);
    }

    public askForLoan_args() {
    }

    public askForLoan_args(
      LoanRequest loanRequest)
    {
      this();
      this.loanRequest = loanRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public askForLoan_args(askForLoan_args other) {
      if (other.isSetLoanRequest()) {
        this.loanRequest = new LoanRequest(other.loanRequest);
      }
    }

    public askForLoan_args deepCopy() {
      return new askForLoan_args(this);
    }

    @Override
    public void clear() {
      this.loanRequest = null;
    }

    public LoanRequest getLoanRequest() {
      return this.loanRequest;
    }

    public askForLoan_args setLoanRequest(LoanRequest loanRequest) {
      this.loanRequest = loanRequest;
      return this;
    }

    public void unsetLoanRequest() {
      this.loanRequest = null;
    }

    /** Returns true if field loanRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanRequest() {
      return this.loanRequest != null;
    }

    public void setLoanRequestIsSet(boolean value) {
      if (!value) {
        this.loanRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_REQUEST:
        if (value == null) {
          unsetLoanRequest();
        } else {
          setLoanRequest((LoanRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_REQUEST:
        return getLoanRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_REQUEST:
        return isSetLoanRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof askForLoan_args)
        return this.equals((askForLoan_args)that);
      return false;
    }

    public boolean equals(askForLoan_args that) {
      if (that == null)
        return false;

      boolean this_present_loanRequest = true && this.isSetLoanRequest();
      boolean that_present_loanRequest = true && that.isSetLoanRequest();
      if (this_present_loanRequest || that_present_loanRequest) {
        if (!(this_present_loanRequest && that_present_loanRequest))
          return false;
        if (!this.loanRequest.equals(that.loanRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(askForLoan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanRequest()).compareTo(other.isSetLoanRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRequest, other.loanRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("askForLoan_args(");
      boolean first = true;

      sb.append("loanRequest:");
      if (this.loanRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.loanRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loanRequest != null) {
        loanRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class askForLoan_argsStandardSchemeFactory implements SchemeFactory {
      public askForLoan_argsStandardScheme getScheme() {
        return new askForLoan_argsStandardScheme();
      }
    }

    private static class askForLoan_argsStandardScheme extends StandardScheme<askForLoan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, askForLoan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loanRequest = new LoanRequest();
                struct.loanRequest.read(iprot);
                struct.setLoanRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, askForLoan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loanRequest != null) {
          oprot.writeFieldBegin(LOAN_REQUEST_FIELD_DESC);
          struct.loanRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class askForLoan_argsTupleSchemeFactory implements SchemeFactory {
      public askForLoan_argsTupleScheme getScheme() {
        return new askForLoan_argsTupleScheme();
      }
    }

    private static class askForLoan_argsTupleScheme extends TupleScheme<askForLoan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, askForLoan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanRequest()) {
          struct.loanRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, askForLoan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanRequest = new LoanRequest();
          struct.loanRequest.read(iprot);
          struct.setLoanRequestIsSet(true);
        }
      }
    }

  }

  public static class askForLoan_result implements org.apache.thrift.TBase<askForLoan_result, askForLoan_result._Fields>, java.io.Serializable, Cloneable, Comparable<askForLoan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("askForLoan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IG_FIELD_DESC = new org.apache.thrift.protocol.TField("ig", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IA_FIELD_DESC = new org.apache.thrift.protocol.TField("ia", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new askForLoan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new askForLoan_resultTupleSchemeFactory());
    }

    public LoanResponse success; // required
    public InvalidGuid ig; // required
    public InvalidAccount ia; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IG((short)1, "ig"),
      IA((short)2, "ia");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IG
            return IG;
          case 2: // IA
            return IA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanResponse.class)));
      tmpMap.put(_Fields.IG, new org.apache.thrift.meta_data.FieldMetaData("ig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IA, new org.apache.thrift.meta_data.FieldMetaData("ia", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(askForLoan_result.class, metaDataMap);
    }

    public askForLoan_result() {
    }

    public askForLoan_result(
      LoanResponse success,
      InvalidGuid ig,
      InvalidAccount ia)
    {
      this();
      this.success = success;
      this.ig = ig;
      this.ia = ia;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public askForLoan_result(askForLoan_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoanResponse(other.success);
      }
      if (other.isSetIg()) {
        this.ig = new InvalidGuid(other.ig);
      }
      if (other.isSetIa()) {
        this.ia = new InvalidAccount(other.ia);
      }
    }

    public askForLoan_result deepCopy() {
      return new askForLoan_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ig = null;
      this.ia = null;
    }

    public LoanResponse getSuccess() {
      return this.success;
    }

    public askForLoan_result setSuccess(LoanResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidGuid getIg() {
      return this.ig;
    }

    public askForLoan_result setIg(InvalidGuid ig) {
      this.ig = ig;
      return this;
    }

    public void unsetIg() {
      this.ig = null;
    }

    /** Returns true if field ig is set (has been assigned a value) and false otherwise */
    public boolean isSetIg() {
      return this.ig != null;
    }

    public void setIgIsSet(boolean value) {
      if (!value) {
        this.ig = null;
      }
    }

    public InvalidAccount getIa() {
      return this.ia;
    }

    public askForLoan_result setIa(InvalidAccount ia) {
      this.ia = ia;
      return this;
    }

    public void unsetIa() {
      this.ia = null;
    }

    /** Returns true if field ia is set (has been assigned a value) and false otherwise */
    public boolean isSetIa() {
      return this.ia != null;
    }

    public void setIaIsSet(boolean value) {
      if (!value) {
        this.ia = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoanResponse)value);
        }
        break;

      case IG:
        if (value == null) {
          unsetIg();
        } else {
          setIg((InvalidGuid)value);
        }
        break;

      case IA:
        if (value == null) {
          unsetIa();
        } else {
          setIa((InvalidAccount)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IG:
        return getIg();

      case IA:
        return getIa();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IG:
        return isSetIg();
      case IA:
        return isSetIa();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof askForLoan_result)
        return this.equals((askForLoan_result)that);
      return false;
    }

    public boolean equals(askForLoan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ig = true && this.isSetIg();
      boolean that_present_ig = true && that.isSetIg();
      if (this_present_ig || that_present_ig) {
        if (!(this_present_ig && that_present_ig))
          return false;
        if (!this.ig.equals(that.ig))
          return false;
      }

      boolean this_present_ia = true && this.isSetIa();
      boolean that_present_ia = true && that.isSetIa();
      if (this_present_ia || that_present_ia) {
        if (!(this_present_ia && that_present_ia))
          return false;
        if (!this.ia.equals(that.ia))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(askForLoan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIg()).compareTo(other.isSetIg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ig, other.ig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIa()).compareTo(other.isSetIa());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIa()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ia, other.ia);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("askForLoan_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ig:");
      if (this.ig == null) {
        sb.append("null");
      } else {
        sb.append(this.ig);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ia:");
      if (this.ia == null) {
        sb.append("null");
      } else {
        sb.append(this.ia);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class askForLoan_resultStandardSchemeFactory implements SchemeFactory {
      public askForLoan_resultStandardScheme getScheme() {
        return new askForLoan_resultStandardScheme();
      }
    }

    private static class askForLoan_resultStandardScheme extends StandardScheme<askForLoan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, askForLoan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoanResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ig = new InvalidGuid();
                struct.ig.read(iprot);
                struct.setIgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ia = new InvalidAccount();
                struct.ia.read(iprot);
                struct.setIaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, askForLoan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ig != null) {
          oprot.writeFieldBegin(IG_FIELD_DESC);
          struct.ig.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ia != null) {
          oprot.writeFieldBegin(IA_FIELD_DESC);
          struct.ia.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class askForLoan_resultTupleSchemeFactory implements SchemeFactory {
      public askForLoan_resultTupleScheme getScheme() {
        return new askForLoan_resultTupleScheme();
      }
    }

    private static class askForLoan_resultTupleScheme extends TupleScheme<askForLoan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, askForLoan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIg()) {
          optionals.set(1);
        }
        if (struct.isSetIa()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIg()) {
          struct.ig.write(oprot);
        }
        if (struct.isSetIa()) {
          struct.ia.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, askForLoan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new LoanResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ig = new InvalidGuid();
          struct.ig.read(iprot);
          struct.setIgIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ia = new InvalidAccount();
          struct.ia.read(iprot);
          struct.setIaIsSet(true);
        }
      }
    }

  }

}
