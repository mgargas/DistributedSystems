/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mgargas.bank;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LoanResponse implements org.apache.thrift.TBase<LoanResponse, LoanResponse._Fields>, java.io.Serializable, Cloneable, Comparable<LoanResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanResponse");

  private static final org.apache.thrift.protocol.TField ACCEPTED_FIELD_DESC = new org.apache.thrift.protocol.TField("accepted", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("baseCost", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("targetCost", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanResponseTupleSchemeFactory());
  }

  public boolean accepted; // required
  public Money baseCost; // optional
  public Money targetCost; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCEPTED((short)1, "accepted"),
    BASE_COST((short)2, "baseCost"),
    TARGET_COST((short)3, "targetCost");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCEPTED
          return ACCEPTED;
        case 2: // BASE_COST
          return BASE_COST;
        case 3: // TARGET_COST
          return TARGET_COST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCEPTED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BASE_COST,_Fields.TARGET_COST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCEPTED, new org.apache.thrift.meta_data.FieldMetaData("accepted", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BASE_COST, new org.apache.thrift.meta_data.FieldMetaData("baseCost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Money.class)));
    tmpMap.put(_Fields.TARGET_COST, new org.apache.thrift.meta_data.FieldMetaData("targetCost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Money.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanResponse.class, metaDataMap);
  }

  public LoanResponse() {
  }

  public LoanResponse(
    boolean accepted)
  {
    this();
    this.accepted = accepted;
    setAcceptedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanResponse(LoanResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.accepted = other.accepted;
    if (other.isSetBaseCost()) {
      this.baseCost = new Money(other.baseCost);
    }
    if (other.isSetTargetCost()) {
      this.targetCost = new Money(other.targetCost);
    }
  }

  public LoanResponse deepCopy() {
    return new LoanResponse(this);
  }

  @Override
  public void clear() {
    setAcceptedIsSet(false);
    this.accepted = false;
    this.baseCost = null;
    this.targetCost = null;
  }

  public boolean isAccepted() {
    return this.accepted;
  }

  public LoanResponse setAccepted(boolean accepted) {
    this.accepted = accepted;
    setAcceptedIsSet(true);
    return this;
  }

  public void unsetAccepted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCEPTED_ISSET_ID);
  }

  /** Returns true if field accepted is set (has been assigned a value) and false otherwise */
  public boolean isSetAccepted() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCEPTED_ISSET_ID);
  }

  public void setAcceptedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCEPTED_ISSET_ID, value);
  }

  public Money getBaseCost() {
    return this.baseCost;
  }

  public LoanResponse setBaseCost(Money baseCost) {
    this.baseCost = baseCost;
    return this;
  }

  public void unsetBaseCost() {
    this.baseCost = null;
  }

  /** Returns true if field baseCost is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseCost() {
    return this.baseCost != null;
  }

  public void setBaseCostIsSet(boolean value) {
    if (!value) {
      this.baseCost = null;
    }
  }

  public Money getTargetCost() {
    return this.targetCost;
  }

  public LoanResponse setTargetCost(Money targetCost) {
    this.targetCost = targetCost;
    return this;
  }

  public void unsetTargetCost() {
    this.targetCost = null;
  }

  /** Returns true if field targetCost is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetCost() {
    return this.targetCost != null;
  }

  public void setTargetCostIsSet(boolean value) {
    if (!value) {
      this.targetCost = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCEPTED:
      if (value == null) {
        unsetAccepted();
      } else {
        setAccepted((Boolean)value);
      }
      break;

    case BASE_COST:
      if (value == null) {
        unsetBaseCost();
      } else {
        setBaseCost((Money)value);
      }
      break;

    case TARGET_COST:
      if (value == null) {
        unsetTargetCost();
      } else {
        setTargetCost((Money)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCEPTED:
      return Boolean.valueOf(isAccepted());

    case BASE_COST:
      return getBaseCost();

    case TARGET_COST:
      return getTargetCost();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCEPTED:
      return isSetAccepted();
    case BASE_COST:
      return isSetBaseCost();
    case TARGET_COST:
      return isSetTargetCost();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanResponse)
      return this.equals((LoanResponse)that);
    return false;
  }

  public boolean equals(LoanResponse that) {
    if (that == null)
      return false;

    boolean this_present_accepted = true;
    boolean that_present_accepted = true;
    if (this_present_accepted || that_present_accepted) {
      if (!(this_present_accepted && that_present_accepted))
        return false;
      if (this.accepted != that.accepted)
        return false;
    }

    boolean this_present_baseCost = true && this.isSetBaseCost();
    boolean that_present_baseCost = true && that.isSetBaseCost();
    if (this_present_baseCost || that_present_baseCost) {
      if (!(this_present_baseCost && that_present_baseCost))
        return false;
      if (!this.baseCost.equals(that.baseCost))
        return false;
    }

    boolean this_present_targetCost = true && this.isSetTargetCost();
    boolean that_present_targetCost = true && that.isSetTargetCost();
    if (this_present_targetCost || that_present_targetCost) {
      if (!(this_present_targetCost && that_present_targetCost))
        return false;
      if (!this.targetCost.equals(that.targetCost))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LoanResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccepted()).compareTo(other.isSetAccepted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccepted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accepted, other.accepted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseCost()).compareTo(other.isSetBaseCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseCost, other.baseCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetCost()).compareTo(other.isSetTargetCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetCost, other.targetCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanResponse(");
    boolean first = true;

    sb.append("accepted:");
    sb.append(this.accepted);
    first = false;
    if (isSetBaseCost()) {
      if (!first) sb.append(", ");
      sb.append("baseCost:");
      if (this.baseCost == null) {
        sb.append("null");
      } else {
        sb.append(this.baseCost);
      }
      first = false;
    }
    if (isSetTargetCost()) {
      if (!first) sb.append(", ");
      sb.append("targetCost:");
      if (this.targetCost == null) {
        sb.append("null");
      } else {
        sb.append(this.targetCost);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'accepted' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (baseCost != null) {
      baseCost.validate();
    }
    if (targetCost != null) {
      targetCost.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanResponseStandardSchemeFactory implements SchemeFactory {
    public LoanResponseStandardScheme getScheme() {
      return new LoanResponseStandardScheme();
    }
  }

  private static class LoanResponseStandardScheme extends StandardScheme<LoanResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCEPTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.accepted = iprot.readBool();
              struct.setAcceptedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.baseCost = new Money();
              struct.baseCost.read(iprot);
              struct.setBaseCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.targetCost = new Money();
              struct.targetCost.read(iprot);
              struct.setTargetCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAccepted()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'accepted' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACCEPTED_FIELD_DESC);
      oprot.writeBool(struct.accepted);
      oprot.writeFieldEnd();
      if (struct.baseCost != null) {
        if (struct.isSetBaseCost()) {
          oprot.writeFieldBegin(BASE_COST_FIELD_DESC);
          struct.baseCost.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.targetCost != null) {
        if (struct.isSetTargetCost()) {
          oprot.writeFieldBegin(TARGET_COST_FIELD_DESC);
          struct.targetCost.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanResponseTupleSchemeFactory implements SchemeFactory {
    public LoanResponseTupleScheme getScheme() {
      return new LoanResponseTupleScheme();
    }
  }

  private static class LoanResponseTupleScheme extends TupleScheme<LoanResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.accepted);
      BitSet optionals = new BitSet();
      if (struct.isSetBaseCost()) {
        optionals.set(0);
      }
      if (struct.isSetTargetCost()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBaseCost()) {
        struct.baseCost.write(oprot);
      }
      if (struct.isSetTargetCost()) {
        struct.targetCost.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.accepted = iprot.readBool();
      struct.setAcceptedIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.baseCost = new Money();
        struct.baseCost.read(iprot);
        struct.setBaseCostIsSet(true);
      }
      if (incoming.get(1)) {
        struct.targetCost = new Money();
        struct.targetCost.read(iprot);
        struct.setTargetCostIsSet(true);
      }
    }
  }

}

