/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mgargas.bank;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InaccessibleCurrency extends TException implements org.apache.thrift.TBase<InaccessibleCurrency, InaccessibleCurrency._Fields>, java.io.Serializable, Cloneable, Comparable<InaccessibleCurrency> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InaccessibleCurrency");

  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AVAILABLE_CURRENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("availableCurrencies", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InaccessibleCurrencyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InaccessibleCurrencyTupleSchemeFactory());
  }

  public String reason; // required
  public List<Currency> availableCurrencies; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REASON((short)1, "reason"),
    AVAILABLE_CURRENCIES((short)2, "availableCurrencies");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REASON
          return REASON;
        case 2: // AVAILABLE_CURRENCIES
          return AVAILABLE_CURRENCIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVAILABLE_CURRENCIES, new org.apache.thrift.meta_data.FieldMetaData("availableCurrencies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Currency.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InaccessibleCurrency.class, metaDataMap);
  }

  public InaccessibleCurrency() {
    this.reason = "This currency is inaccessible.";

  }

  public InaccessibleCurrency(
    String reason,
    List<Currency> availableCurrencies)
  {
    this();
    this.reason = reason;
    this.availableCurrencies = availableCurrencies;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InaccessibleCurrency(InaccessibleCurrency other) {
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetAvailableCurrencies()) {
      List<Currency> __this__availableCurrencies = new ArrayList<Currency>(other.availableCurrencies.size());
      for (Currency other_element : other.availableCurrencies) {
        __this__availableCurrencies.add(other_element);
      }
      this.availableCurrencies = __this__availableCurrencies;
    }
  }

  public InaccessibleCurrency deepCopy() {
    return new InaccessibleCurrency(this);
  }

  @Override
  public void clear() {
    this.reason = "This currency is inaccessible.";

    this.availableCurrencies = null;
  }

  public String getReason() {
    return this.reason;
  }

  public InaccessibleCurrency setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public int getAvailableCurrenciesSize() {
    return (this.availableCurrencies == null) ? 0 : this.availableCurrencies.size();
  }

  public java.util.Iterator<Currency> getAvailableCurrenciesIterator() {
    return (this.availableCurrencies == null) ? null : this.availableCurrencies.iterator();
  }

  public void addToAvailableCurrencies(Currency elem) {
    if (this.availableCurrencies == null) {
      this.availableCurrencies = new ArrayList<Currency>();
    }
    this.availableCurrencies.add(elem);
  }

  public List<Currency> getAvailableCurrencies() {
    return this.availableCurrencies;
  }

  public InaccessibleCurrency setAvailableCurrencies(List<Currency> availableCurrencies) {
    this.availableCurrencies = availableCurrencies;
    return this;
  }

  public void unsetAvailableCurrencies() {
    this.availableCurrencies = null;
  }

  /** Returns true if field availableCurrencies is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableCurrencies() {
    return this.availableCurrencies != null;
  }

  public void setAvailableCurrenciesIsSet(boolean value) {
    if (!value) {
      this.availableCurrencies = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case AVAILABLE_CURRENCIES:
      if (value == null) {
        unsetAvailableCurrencies();
      } else {
        setAvailableCurrencies((List<Currency>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REASON:
      return getReason();

    case AVAILABLE_CURRENCIES:
      return getAvailableCurrencies();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REASON:
      return isSetReason();
    case AVAILABLE_CURRENCIES:
      return isSetAvailableCurrencies();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InaccessibleCurrency)
      return this.equals((InaccessibleCurrency)that);
    return false;
  }

  public boolean equals(InaccessibleCurrency that) {
    if (that == null)
      return false;

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_availableCurrencies = true && this.isSetAvailableCurrencies();
    boolean that_present_availableCurrencies = true && that.isSetAvailableCurrencies();
    if (this_present_availableCurrencies || that_present_availableCurrencies) {
      if (!(this_present_availableCurrencies && that_present_availableCurrencies))
        return false;
      if (!this.availableCurrencies.equals(that.availableCurrencies))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(InaccessibleCurrency other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableCurrencies()).compareTo(other.isSetAvailableCurrencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableCurrencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableCurrencies, other.availableCurrencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InaccessibleCurrency(");
    boolean first = true;

    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("availableCurrencies:");
    if (this.availableCurrencies == null) {
      sb.append("null");
    } else {
      sb.append(this.availableCurrencies);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InaccessibleCurrencyStandardSchemeFactory implements SchemeFactory {
    public InaccessibleCurrencyStandardScheme getScheme() {
      return new InaccessibleCurrencyStandardScheme();
    }
  }

  private static class InaccessibleCurrencyStandardScheme extends StandardScheme<InaccessibleCurrency> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InaccessibleCurrency struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AVAILABLE_CURRENCIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.availableCurrencies = new ArrayList<Currency>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Currency _elem2;
                  _elem2 = Currency.findByValue(iprot.readI32());
                  struct.availableCurrencies.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAvailableCurrenciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InaccessibleCurrency struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      if (struct.availableCurrencies != null) {
        oprot.writeFieldBegin(AVAILABLE_CURRENCIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.availableCurrencies.size()));
          for (Currency _iter3 : struct.availableCurrencies)
          {
            oprot.writeI32(_iter3.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InaccessibleCurrencyTupleSchemeFactory implements SchemeFactory {
    public InaccessibleCurrencyTupleScheme getScheme() {
      return new InaccessibleCurrencyTupleScheme();
    }
  }

  private static class InaccessibleCurrencyTupleScheme extends TupleScheme<InaccessibleCurrency> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InaccessibleCurrency struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReason()) {
        optionals.set(0);
      }
      if (struct.isSetAvailableCurrencies()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetAvailableCurrencies()) {
        {
          oprot.writeI32(struct.availableCurrencies.size());
          for (Currency _iter4 : struct.availableCurrencies)
          {
            oprot.writeI32(_iter4.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InaccessibleCurrency struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.availableCurrencies = new ArrayList<Currency>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            Currency _elem7;
            _elem7 = Currency.findByValue(iprot.readI32());
            struct.availableCurrencies.add(_elem7);
          }
        }
        struct.setAvailableCurrenciesIsSet(true);
      }
    }
  }

}

